/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"

interface nsIInterfaceRequestor;

[scriptable, builtinclass, uuid(418265c8-654e-4fbb-ba62-4eed27de1f03)]
interface nsISSLSocketControl : nsISupports {
    attribute nsIInterfaceRequestor     notificationCallbacks;

    /* negotiatedNPN is '' if no NPN list was provided by the client,
     * or if the server did not select any protocol choice from that
     * list. That also includes the case where the server does not
     * implement NPN.
     *
     * If negotiatedNPN is read before NPN has progressed to the point
     * where this information is available NS_ERROR_NOT_CONNECTED is
     * raised.
     */
    readonly attribute ACString negotiatedNPN;

    /* Determine if a potential SSL connection to hostname:port with
     * a desired NPN negotiated protocol of npnProtocol can use the socket
     * associated with this object instead of making a new one. And if so, combine
     * them.
     */
    boolean joinConnection(
      in ACString npnProtocol, /* e.g. "h2" */
      in ACString hostname,
      in long port);

    /* just like JoinConnection() except do not mark a successful test as joined.
     */
    boolean testJoinConnection(
      in ACString npnProtocol, /* e.g. "h2" */
      in ACString hostname,
      in long port);

    /* Determine if existing connection should be trusted to convey information about
     * a hostname.
     */
    boolean isAcceptableForHost(in ACString hostname);

    /*
     * The original flags from the socket provider.
     */
    readonly attribute uint32_t providerFlags;

    /* These values are defined by TLS. */
    const short SSL_VERSION_3   = 0x0300;
    const short TLS_VERSION_1   = 0x0301;
    const short TLS_VERSION_1_1 = 0x0302;
    const short TLS_VERSION_1_2 = 0x0303;
    const short TLS_VERSION_1_3 = 0x0304;
    const short SSL_VERSION_UNKNOWN = -1;

    [infallible] readonly attribute short SSLVersionUsed;
    [infallible] readonly attribute short SSLVersionOffered;

    /**
     * True iff a client cert has been sent to the server - i.e. this
     * socket has been client-cert authenticated.
     */
    [infallible] readonly attribute boolean clientCertSent;

    /*
     * failedVerification is true if any enforced certificate checks have failed.
     * Connections that have not yet tried to verify, or are using acceptable
     * exceptions will all return false.
     */
    [infallible] readonly attribute boolean failedVerification;

    /**
     * If the server certificate is present, serverCertIsBuiltInRoot is true if
     * the root certificate for the server certificate is built in.
     */
    readonly attribute boolean serverRootCertIsBuiltInRoot;

    /**
     * True if the connection was resumed using the resumption token.
     */
    readonly attribute boolean resumed;
};
